@import '../../node_modules/bootstrap-reboot/dist/reboot.min';

$primary-color: palegoldenrod;
$global-var: #6caf6c;

:root {
    font-size: 100%;
}

html,
body {
    height: 100%;
    margin: 0;
    padding: 0;
}

.wrapper {
    padding: 20px;
}

.header {
    color: #fd3860;
    text-align: center;
    font-size: 1.2rem;
}

//mixins for reuse with default value for bg
@mixin square($width, $height, $bg: $primary-color) {
    width: $width;
    height: $height;
    background: $bg;
}

//inheritance styles
%square-child {
    font-size: 1.3rem;
}

.container {
    @include square(200px, 200px);
}

.one {
    @extend %square-child;
    background: crimson;
}

.two {
    @extend %square-child;
    background: skyblue;
}

.three {
    @extend %square-child;
    background: palevioletred;
}

//Using BEM with & parent selector
.nav {
    margin: 10px 0 0 0;
    width: 400px;
    height: 200px;
    display: flex;
    align-items: center;
    background: lightgray;

    &__list {
        flex: 1;
        background: darkgray;
        padding: 10px;
    }

    &__item {
        background: cyan;
        padding: 10px;
    }

    &__link {
        color: darkblue;

        &--active {
            color: white;
        }
    }
}

//globals vs locals
.head-wrap > :nth-child(1) {
    //modify the global variable
    $global-var: crimson !global;
    color: $global-var;
    margin: 10px 0 0 0;
}

.head-wrap > :nth-child(2) {
    //local variable
    $local-var: #fffc5c;
    color: $global-var;
    background: $local-var;
    display: inline;
}

//mixins with interpolation
@mixin myheading($name, $color-or-bg) {
    .head-#{$name} {
        #{$color-or-bg}: green;
    }
}

@include myheading('inter', 'color');

//mixin with content block
@mixin contentMix($name) {
    background: grey;
    width: 200px;

    &-#{$name} {
        @content;
    }
}

.content-mix {
    @include contentMix('inner') {
        color: orange;
    }
}

//using extend
.error {
    background: palevioletred;
    border: 1px solid black;
    display: inline-block;
    margin: 10px 0 0 0;

    &--serious {
        @extend .error;
        border: 15px solid #00000065;
    }
}

//using placeholder selectors with extend
%dialog-button {
    padding: 10px;
    border-radius: 10px;
    border: 1px solid black;
    cursor: pointer;
}

.confirm {
    @extend %dialog-button;
    background: #4ebd4e;
}

.cancel {
    @extend %dialog-button;
    background: #ff5656;
}

//using functions
@function sum($w1, $w2, $w3) {
    $result: $w1 + $w2 + $w3;
    @return $result;
}

.fun-div {
    width: sum(100, 100, 100) + 50px;
    background: paleturquoise;
    border: 1px solid black;
    margin: 10px 0 0 0;
}

//list
//get value
@debug nth(10px 20px 30px 40px, 2);
//append to list
@debug append(10px 20px 30px 40px, 50px);
//get index
@debug index(10px 20px 30px 40px, 20px);
//iteration
$colors: red green blue orange;

@each $color in $colors {
    @debug 'Color is: #{$color}';
}

//map
$weights: (
    'regular': 400,
    'medium': 500,
    'bold': 600
);
//get value by key
@debug map-get($weights, 'medium');
//add to map
@debug map-merge(
    $weights,
    (
        'extra-bold': 900
    )
);
//iteration
@each $key, $value in $weights {
    .style-#{$key} {
        font-weight: $value;
    }
}
//remove key-val
@debug map-remove($weights, 'bold');

//control flow
//@if and @else
$circle: true;

.profile-pic {
    width: 40px;
    height: 40px;
    border: 1px solid black;
    background: palegoldenrod;
    @if $circle {
        border-radius: 50%;
    } @else {
        border-radius: 10px;
    }
}
//@each see above
//@for
@for $i from 1 through 5 {
    @debug 'For #{$i}';
}
//@while
$value: 0;
@while $value < 5 {
    $value: $value + 1;
    @debug 'While #{$value}';
}
@debug $value;
